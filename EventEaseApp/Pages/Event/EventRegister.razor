@page "/event/register"
@page "/event/edit/{id:int}"

@using EventEase.Models
@using EventEase.Services
@using EventEaseApp.Extensions
@using Microsoft.AspNetCore.Components.Forms

@if(!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="alert alert-danger">
        @ErrorMessage
    </div>
}

<EditForm Model="@NewEvent" OnValidSubmit="HandleValidSubmit">
    <FluentValidationValidator />
    <ValidationSummary />

    <div>
        <label>Event Name:</label>
        <InputText @bind-Value="NewEvent.Name" class="form-control" />
    </div>

    <div>
        <label>Date:</label>
        <InputDate @bind-Value="NewEvent.Date" class="form-control" />
    </div>

    <div>
        <label>Location:</label>
        <InputText @bind-Value="NewEvent.Location" class="form-control" />
    </div>

    <div>
        <label>Location:</label>
        <InputTextArea @bind-Value="NewEvent.Description" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {

    [Inject] private EventInMemoryService EventInMemory { get; set; } = default;
    [Parameter] public int Id { get; set; } = 0;
    [Parameter] public EventCallback<EventModel> OnEventCreated { get; set; }

    private EventModel NewEvent = new();
    private string? ErrorMessage { get; set; }

    protected override void OnInitialized()
    {
        if (Id > 0)
        {
            var ev = EventInMemory
                .GetEventModelById(Id)
                ?.DeepClone();

            if (ev is not null)
            {
                NewEvent = ev;
            }
            else
            {
                ErrorMessage = $"Event with ID {Id} not found.";
                NewEvent = new EventModel();                
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        if (NewEvent is null)
        {
            ErrorMessage = "Event data is not valid.";
            return;
        }

        Console.WriteLine($"Name: {NewEvent.Name}, Email: {NewEvent.Location}");

        EventInMemory.SubmitEventModel(NewEvent);
        
        if (OnEventCreated.HasDelegate)
        {
            await OnEventCreated.InvokeAsync(NewEvent);
        }

        NewEvent = new EventModel();
    }
}
