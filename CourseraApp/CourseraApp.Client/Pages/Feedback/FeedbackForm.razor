@page "/feedback/add"
@page "/feedback/edit/{id:int}"
@using CourseraApp.Client.Services
@using CourseraApp.Client.Models

<h3>Feedback Form</h3>

@* <EditForm Model="@_feedback" OnValidSubmit="HandleValidSubmit">
    <FluentValidationValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="_feedback.Name" />
        <ValidationMessage For="@(() => _feedback.Name)" />
    </div>
    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="_feedback.Email" />
        <ValidationMessage For="@(() => _feedback .Email)" />
    </div>
    <div class="mb-3">
        <label for="Comment" class="form-label">Comment</label>
        <InputTextArea id="Comment" class="form-control" @bind-Value="_feedback.Comment"></InputTextArea>
        <ValidationMessage For="@(() => _feedback.Comment)" />
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>
 *@
@code {
    [Parameter] public int Id { get; set; } = 0;
    [Inject] private FeedbackInMemoryService FeedbackInMemory { get; set; } = default;

    private Feedback _feedback = new ();

    protected override void OnInitialized()
    {   
        if (Id > 0)
        {
            _feedback = FeedbackInMemory.GetFeedbackById(Id);
        }
    }

    private void HandleValidSubmit()
    {
        Console.WriteLine($"Name: {_feedback.Name}, Email: {_feedback.Email}, Comment: {_feedback.Comment}");

        FeedbackInMemory.SubmitFeedback(_feedback);
        
        _feedback = new Feedback();
    }
}