@page "/feedback/list"
@rendermode InteractiveWebAssembly

@inject FeedbackInMemoryService _feedbackInMemory
@inject NavigationManager NavManager

<h3>Feedback Submissions</h3>
@if (isLoaded)
{
    <p class="text-success">Feedback loaded successfully!</p>
}
else
{
    <p class="text-warning">Loading feedback...</p>
}

<button class="btn btn-primary" @onclick="NavigateToAddFeedback">Add New Feedback</button>
@if (feedbackListItems.Count == 0)
{
    <p>No feedback submissions found.</p>
}
else
{
    <hr/>
    <ul class="list-group">
        @foreach (var feedback in feedbackListItems)
        {
            <FeedbackItem Feedback="feedback"
                          OnEdit="EditFeedback"
                          OnRemove="RemoveFeedback"
                          @key="feedback.Id" />
        }

    </ul>
}
<hr />
<button class="btn btn-danger" @onclick="ClearFeedbacks">Clear Feedbacks</button>


@code {
    private List<Feedback> feedbackListItems = [];
    private List<Feedback> visibleFeedbackItems = [];
    private bool isLoaded = false;
    private int feedbackCount = 0;

    protected override async Task OnInitializedAsync()
    {
        isLoaded = false;
        // Service is being called twice due to the interactive mode
        // Some how it keep different instances for the _feedbackInMemory service
        if(this.RendererInfo.IsInteractive)
        {   
            
            visibleFeedbackItems = _feedbackInMemory.GetAllFeedbacks();
            feedbackListItems.Clear();

            foreach (var item in visibleFeedbackItems)
            {
                item.CreatedAt = DateTime.Now; // Simulate a created date
                feedbackListItems.Add(item);
                StateHasChanged(); // Trigger re-render
                await Task.Delay(1000); // Delay between items
            }
            isLoaded = true;
        }
    }

    private void NavigateToAddFeedback()
    {
        NavManager.NavigateTo("/feedback/add", false);
    }

    private void EditFeedback(Feedback feedback)
    {
        NavManager.NavigateTo($"/feedback/edit/{feedback.Id}", false);
    }
    private void RemoveFeedback(Feedback feedback)
    {
        _feedbackInMemory.RemoveFeedback(feedback);
        //feedbackListItems = _feedbackInMemory.GetAllFeedbacks();
        feedbackListItems.Remove(feedback);
        feedbackListItems = feedbackListItems
            .Select((x, index) => 
            {
                x.Name += $" ({index + 1})"; // Append index to name for uniqueness
                return x;
            })
            .ToList();
        StateHasChanged();
    }

    private void ClearFeedbacks()
    {
        _feedbackInMemory.ClearFeedback();
        feedbackListItems.Clear();
    }
}